version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/catalog
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=development
      - FLASK_APP=application.py
      - GOOGLE_CLIENT_ID=your-client-id-here
      - GOOGLE_PROJECT_ID=your-project-id-here
      - GOOGLE_CLIENT_SECRET=your-client-secret-here
      - GOOGLE_AUTH_URI=https://accounts.google.com/o/oauth2/auth
      - GOOGLE_TOKEN_URI=https://www.googleapis.com/oauth2/v3/token
      - GOOGLE_AUTH_PROVIDER_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
      - GOOGLE_REDIRECT_URIS=["http://localhost:8000/login"]
      - GOOGLE_JAVASCRIPT_ORIGINS=["http://localhost:8000"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=catalog
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: catalog_postgres_data

networks:
  app-network:
    driver: bridge
    name: catalog_network 